Resources:
  MyVPCAFB07A31:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/MyVPC
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/Resource
  MyVPCpublicSubnet1Subnet0B09E184:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: EfsAutoscalingStack/MyVPC/publicSubnet1
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet1/Subnet
  MyVPCpublicSubnet1RouteTableF452D270:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/MyVPC/publicSubnet1
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet1/RouteTable
  MyVPCpublicSubnet1RouteTableAssociation61BB7007:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCpublicSubnet1RouteTableF452D270
      SubnetId:
        Ref: MyVPCpublicSubnet1Subnet0B09E184
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet1/RouteTableAssociation
  MyVPCpublicSubnet1DefaultRoute064E2CB1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVPCIGW30AB6DD6
      RouteTableId:
        Ref: MyVPCpublicSubnet1RouteTableF452D270
    DependsOn:
      - MyVPCVPCGWE6F260E1
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet1/DefaultRoute
  MyVPCpublicSubnet2SubnetF1A4E852:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: EfsAutoscalingStack/MyVPC/publicSubnet2
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet2/Subnet
  MyVPCpublicSubnet2RouteTableD03A1158:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/MyVPC/publicSubnet2
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet2/RouteTable
  MyVPCpublicSubnet2RouteTableAssociationE1106DF5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyVPCpublicSubnet2RouteTableD03A1158
      SubnetId:
        Ref: MyVPCpublicSubnet2SubnetF1A4E852
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet2/RouteTableAssociation
  MyVPCpublicSubnet2DefaultRoute0CED5BC7:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyVPCIGW30AB6DD6
      RouteTableId:
        Ref: MyVPCpublicSubnet2RouteTableD03A1158
    DependsOn:
      - MyVPCVPCGWE6F260E1
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/publicSubnet2/DefaultRoute
  MyVPCIGW30AB6DD6:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/MyVPC
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/IGW
  MyVPCVPCGWE6F260E1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: MyVPCIGW30AB6DD6
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/VPCGW
  MyVPCRestrictDefaultSecurityGroupCustomResourceC3FF5EE0:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - MyVPCAFB07A31
          - DefaultSecurityGroup
      Account:
        Ref: AWS::AccountId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyVPC/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - Ref: AWS::Partition
                        - ":ec2:"
                        - Ref: AWS::Region
                        - ":"
                        - Ref: AWS::AccountId
                        - :security-group/
                        - Fn::GetAtt:
                            - MyVPCAFB07A31
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: 7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs22.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200
      aws:asset:property: Code
  InstanceSG2AE1100C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, SSH, NFS
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: SSH
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: HTTP
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: NFS
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
      VpcId:
        Ref: MyVPCAFB07A31
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/InstanceSG/Resource
  InstanceSGfromEfsAutoscalingStackInstanceSGD73D0EAA2049127B89C6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Self NFS access
      FromPort: 2049
      GroupId:
        Fn::GetAtt:
          - InstanceSG2AE1100C
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - InstanceSG2AE1100C
          - GroupId
      ToPort: 2049
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/InstanceSG/from EfsAutoscalingStackInstanceSGD73D0EAA:2049
  MyEFS1BD11D38:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      FileSystemPolicy:
        Statement:
          - Action:
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientWrite
            Condition:
              Bool:
                elasticfilesystem:AccessedViaMountTarget: "true"
            Effect: Allow
            Principal:
              AWS: "*"
            Resource:
              Fn::GetAtt:
                - MyEFS1BD11D38
                - Arn
          - Action:
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientWrite
            Condition:
              Bool:
                elasticfilesystem:AccessedViaMountTarget: "true"
            Effect: Allow
            Principal:
              AWS: "*"
        Version: "2012-10-17"
      FileSystemTags:
        - Key: Name
          Value: EfsAutoscalingStack/MyEFS
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
      PerformanceMode: generalPurpose
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyEFS/Resource
  MyEFSEfsMountTargetpublicSubnet107143B9B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: MyEFS1BD11D38
      SecurityGroups:
        - Fn::GetAtt:
            - InstanceSG2AE1100C
            - GroupId
      SubnetId:
        Ref: MyVPCpublicSubnet1Subnet0B09E184
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyEFS/EfsMountTarget-publicSubnet1
  MyEFSEfsMountTargetpublicSubnet247D5B6B0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: MyEFS1BD11D38
      SecurityGroups:
        - Fn::GetAtt:
            - InstanceSG2AE1100C
            - GroupId
      SubnetId:
        Ref: MyVPCpublicSubnet2SubnetF1A4E852
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/MyEFS/EfsMountTarget-publicSubnet2
  TestInstance1InstanceRole3FEBD127:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/TestInstance1
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/TestInstance1/InstanceRole/Resource
  TestInstance1InstanceProfile668AB615:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: TestInstance1InstanceRole3FEBD127
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/TestInstance1/InstanceProfile
  TestInstance15D7E50C5:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: TestInstance1InstanceProfile668AB615
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.micro
      KeyName: Nery-Pair
      SecurityGroupIds:
        - Fn::GetAtt:
            - InstanceSG2AE1100C
            - GroupId
      SubnetId:
        Ref: MyVPCpublicSubnet1Subnet0B09E184
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/TestInstance1
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                EFS_ID="
              - Ref: MyEFS1BD11D38
              - |-
                "
                REGION="
              - Ref: AWS::Region
              - |-
                "
                yum update -y
                yum install -y nfs-utils amazon-efs-utils gcc make autoconf automake unzip curl
                mkdir -p /mnt/efs
                for i in {1..60}; do nslookup "$EFS_ID.efs.$REGION.amazonaws.com" && break || sleep 10; done
                if mount -t efs -o tls ${EFS_ID}:/ /mnt/efs; then
                echo 'Mounted with TLS successfully' >> /var/log/efs-mount.log
                elif mount -t nfs4 -o nfsvers=4.1 ${EFS_ID}.efs.${REGION}.amazonaws.com:/ /mnt/efs; then
                echo 'Mounted without TLS (fallback to NFS)' >> /var/log/efs-mount.log
                else
                echo 'Mount failed' >> /var/log/efs-mount.log
                exit 1
                fi
                ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                echo "Hello from $ID" > /mnt/efs/$ID.txt
                chmod 777 /mnt/efs
                chmod 777 /mnt/efs/$ID.txt
                cd /home/ec2-user
                curl -LO https://github.com/resurrecting-open-source-projects/stress/archive/refs/heads/master.zip
                unzip master.zip
                cd stress-master
                ./autogen.sh || true
                ./configure || true
                make || true
                make install || true
    DependsOn:
      - TestInstance1InstanceRole3FEBD127
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/TestInstance1/Resource
  TestInstance2InstanceRoleBB052DE5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/TestInstance2
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/TestInstance2/InstanceRole/Resource
  TestInstance2InstanceProfile45CD1A48:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: TestInstance2InstanceRoleBB052DE5
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/TestInstance2/InstanceProfile
  TestInstance2BF52AD49:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      IamInstanceProfile:
        Ref: TestInstance2InstanceProfile45CD1A48
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t3.micro
      KeyName: Nery-Pair
      SecurityGroupIds:
        - Fn::GetAtt:
            - InstanceSG2AE1100C
            - GroupId
      SubnetId:
        Ref: MyVPCpublicSubnet1Subnet0B09E184
      Tags:
        - Key: Name
          Value: EfsAutoscalingStack/TestInstance2
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |-
                #!/bin/bash
                EFS_ID="
              - Ref: MyEFS1BD11D38
              - |-
                "
                REGION="
              - Ref: AWS::Region
              - |-
                "
                yum update -y
                yum install -y nfs-utils amazon-efs-utils gcc make autoconf automake unzip curl
                mkdir -p /mnt/efs
                for i in {1..60}; do nslookup "$EFS_ID.efs.$REGION.amazonaws.com" && break || sleep 10; done
                if mount -t efs -o tls ${EFS_ID}:/ /mnt/efs; then
                echo 'Mounted with TLS successfully' >> /var/log/efs-mount.log
                elif mount -t nfs4 -o nfsvers=4.1 ${EFS_ID}.efs.${REGION}.amazonaws.com:/ /mnt/efs; then
                echo 'Mounted without TLS (fallback to NFS)' >> /var/log/efs-mount.log
                else
                echo 'Mount failed' >> /var/log/efs-mount.log
                exit 1
                fi
                ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                echo "Hello from $ID" > /mnt/efs/$ID.txt
                chmod 777 /mnt/efs
                chmod 777 /mnt/efs/$ID.txt
                cd /home/ec2-user
                curl -LO https://github.com/resurrecting-open-source-projects/stress/archive/refs/heads/master.zip
                unzip master.zip
                cd stress-master
                ./autogen.sh || true
                ./configure || true
                make || true
                make install || true
    DependsOn:
      - TestInstance2InstanceRoleBB052DE5
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/TestInstance2/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/91VXW/TMBT9LeRxysLWSSDtLevYiMRY1FaTAFWT69ykpo5t/NERov53ruOEZGNPPFU81T6+9+Rc+9zbWTI7O0vO35Anc0qL3Slnm6RdWkJ3MUKPLdBZ0j4o+q2NQJANh2thPkpjBanBRJdWO4jHk6VTSmo74DX5mf7CqOgkiiNB7C2x8ESaATFuI8DOpShZ5TSxTIroEj/kuZ+FrBrlgdxtOKOIUlboO2J2XdBhfVjH81I85PM4RCy7JCQie8I42TDObPNVioF0r2hW9GtPdcUl3fX7mqhAkql78Yk4QbdDNUzt381fhBNjWCUyPEmLQoMx92KuoS/Fi4uPRMXRCDkOFcEywSh+tZDOwsq7eMRHLDVGUtYR/An2i0xY0BjZ+7p3Yb9LLXbRtgZh4yVQp7HcWy2dQl9irYNUzuVTyvm9sxvpRDGUVYChmqnnF1cUmah8PQvHoesUSlADZwICEnKpFAKoTx0azQn2w0F/vZ0ZOvgkWv8XvP5wGhPednrnfwE9QZwJY4mggNpYv+yHTfAd3aLYrCbVxKb9agfN58mgmrIPZRjQ18SSMTUYC8tsX51sB1/eUehYB3sHJYcYSpO0N4zDsjEW6mcWBkF1oyzga5WEG3xQzkqgDeWQS2RrMC69WX1YPL5/vE6/LDFFgS6lrj33nSz8hysQoAnPnVbSAIZoqOUegYEBG8Jq2bxaYVA7yvO7O+wmuyK6AnuIGamTdiG5f2YcDq6G4qrxxSvNBGWK8JRSnzAOEIzxCSkdW7Dz3r9nr8Po4DC92lzLEnUj9wKMdBqdONg4njtjZT3FA0UPvDhHpj0rQF8RfAIcWGDxX7xiovI5OdFoERxWfoOzRjm8lbyxWyneXiTns+TizXfD2KnGKlgNySL8/gZhI/vwHQgAAA==
    Metadata:
      aws:cdk:path: EfsAutoscalingStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Outputs:
  VPCId:
    Value:
      Ref: MyVPCAFB07A31
  PublicSubnet1:
    Value:
      Ref: MyVPCpublicSubnet1Subnet0B09E184
  PublicSubnet2:
    Value:
      Ref: MyVPCpublicSubnet2SubnetF1A4E852
  EfsId:
    Value:
      Ref: MyEFS1BD11D38
  EfsDns:
    Value:
      Fn::Join:
        - ""
        - - Ref: MyEFS1BD11D38
          - .efs.
          - Ref: AWS::Region
          - .amazonaws.com
  SecurityGroupId:
    Value:
      Fn::GetAtt:
        - InstanceSG2AE1100C
        - GroupId
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-3
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-3
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-4
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - il-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
      - Fn::Equals:
          - Ref: AWS::Region
          - us-west-2

