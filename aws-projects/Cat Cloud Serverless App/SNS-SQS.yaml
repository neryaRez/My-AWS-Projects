
AWSTemplateFormatVersion: '2010-09-09'
Description:  S3 + Lambda + SNS + SQS , uploading system for cat pictures

Resources:

  CatBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub cats-nerya-reznikov-${AWS::AccountId}-${AWS::Region}


  S3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3ToSQSFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt CatBucket.Arn
      SourceAccount: !Ref "AWS::AccountId"

  CatQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CatImageQueue-Nerya_Reznikov
      MessageRetentionPeriod: 86400

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [!Ref CatQueue]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt CatQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref CatTopic

  CatTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CatPicturesTopic

  SNSToSQS:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CatTopic
      Protocol: sqs
      Endpoint: !GetAtt CatQueue.Arn
      RawMessageDelivery: true

  LambdaExecutionRole1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaCatSNSRole1
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSNSAndSQSAndS31
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:SendMessage
                  - s3:GetObject
                  - logs:*
                Resource: "*"

  S3ToSQSFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CatUploadToSQS
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole1.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref CatQueue
      Code:
        ZipFile: |
          import json
          import urllib.parse
          import boto3
          import os

          sqs = boto3.client('sqs')
          QUEUE_URL = os.environ['QUEUE_URL']

          def handler(event, context):
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = urllib.parse.unquote_plus(record['s3']['object']['key'])
                  message = json.dumps({"bucket": bucket, "key": key})
                  sqs.send_message(QueueUrl=QUEUE_URL, MessageBody=message)
              return {"status": "Message sent to SQS"}

  SQSToSNSFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SQSToSNSSender
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole1.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref CatTopic
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import base64

          s3 = boto3.client('s3')
          sns = boto3.client('sns')
          TOPIC_ARN = os.environ['TOPIC_ARN']

          def handler(event, context):
              for record in event['Records']:
                  body = json.loads(record['body'])
                  bucket = body['bucket']
                  key = body['key']

                  url = f"https://{bucket}.s3.amazonaws.com/{key}"


                  sns.publish(
                      TopicArn=TOPIC_ARN,
                      Subject="New Cat Uploaded!",
                      Message=f"New cat image has been uploaded!\n\nView it here:\n{url}"
                  )
              return {"status": "Published to SNS"}

  SQSInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SQSToSNSFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt CatQueue.Arn

  SQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt CatQueue.Arn
      FunctionName: !Ref SQSToSNSFunction
      BatchSize: 1
      Enabled: true

  EmailSubscription1:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CatTopic
      Protocol: email
      Endpoint: neryarez@gmail.com

  NotificationLambdaExecutionRole1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3NotificationConfiguratorRole1
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowS3Notification1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutBucketNotification
                Resource: "*"

  NotificationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3NotificationConfigurator
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt NotificationLambdaExecutionRole1.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          import traceback

          def send_response(event, context, status, reason):
              response_url = event['ResponseURL']
              body = {
                  'Status': status,
                  'Reason': reason,
                  'PhysicalResourceId': 'S3NotificationConfig',
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }
              json_body = json.dumps(body).encode('utf-8')
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_body))
              }
              http = urllib3.PoolManager()
              http.request('PUT', response_url, body=json_body, headers=headers)

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      s3 = boto3.client('s3')
                      props = event['ResourceProperties']
                      bucket = props['Bucket']
                      config = props['NotificationConfiguration']
                      print("Setting notification for bucket:", bucket)
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket,
                          NotificationConfiguration=config
                      )
                  send_response(event, context, 'SUCCESS', 'Notification configured successfully.')
              except Exception as e:
                  traceback.print_exc()
                  send_response(event, context, 'FAILED', f'Failed to configure S3 notification: {str(e)}')

  BucketNotificationLambda:
    Type: Custom::S3Notification
    DependsOn:
      - S3Permission
      - S3ToSQSFunction
      - CatBucket
    Properties:
      ServiceToken: !GetAtt NotificationLambdaFunction.Arn
      Bucket: !Ref CatBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events: ["s3:ObjectCreated:*"]
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .jpeg
            LambdaFunctionArn: !GetAtt S3ToSQSFunction.Arn

Outputs:
  BucketName:
    Value: !Ref CatBucket
  QueueName:
    Value: !Ref CatQueue
  TopicARN:
    Value: !Ref CatTopic
  Lambda1:
    Value: !Ref S3ToSQSFunction
  Lambda2:
    Value: !Ref SQSToSNSFunction
