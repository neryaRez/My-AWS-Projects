AWSTemplateFormatVersion: '2010-09-09'
Description: 2 VPCs, EC2s, VPC Peering, Routing, Internet, and SSM Access

Resources:

  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: VPC1 }]

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: VPC2 }]

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: Subnet1 }]

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      CidrBlock: 20.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: [{ Key: Name, Value: Subnet2 }]

  InternetGateway1:
    Type: AWS::EC2::InternetGateway

  AttachIGW1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPC1
      PeerVpcId: !Ref VPC2
      Tags: [{ Key: Name, Value: VPCPeering }]

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2

  SubnetRouteAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1

  SubnetRouteAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2

  Route1ToVPC2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 20.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  Route2ToVPC1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 10.0.0.0/16
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  RouteToInternet1:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW1
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  SecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ping from VPC2
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 20.0.0.0/16

  SecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ping from VPC1
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16

  EC2SSMRole1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2SSMRole1
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2SSMInstanceProfile1:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2SSMInstanceProfile1
      Roles:
        - Ref: EC2SSMRole1

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: Nery-Pair
      SubnetId: !Ref Subnet1
      SecurityGroupIds: [!Ref SecurityGroup1]
      ImageId: ami-02457590d33d576c3
      IamInstanceProfile: !Ref EC2SSMInstanceProfile1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: Nery-Pair
      SubnetId: !Ref Subnet2
      SecurityGroupIds: [!Ref SecurityGroup2]
      ImageId: ami-02457590d33d576c3
Outputs:
  PrivateIP1:
    Description: EC2 in VPC1
    Value: !GetAtt EC2Instance1.PrivateIp

  PrivateIP2:
    Description: EC2 in VPC2
    Value: !GetAtt EC2Instance2.PrivateIp
